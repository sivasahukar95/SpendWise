import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'addTransaction.dart'; // Ensure this file exists in lib/screens

class MainPage extends StatefulWidget {
  @override
  _MainPageState createState() => _MainPageState();
}

class _MainPageState extends State<MainPage> {
  double income = 0.0;
  List<Map<String, dynamic>> transactions = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[200],
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        title: const Text(
          'Welcome',
          style: TextStyle(
            color: Colors.black87,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  _buildOverviewCard(
                    'Expenses',
                    '₹${_calculateCurrentMonthExpenses().toStringAsFixed(2)}',
                    Colors.red.withOpacity(0.2),
                    Colors.red,
                    Icons.arrow_downward,
                  ),
                  _buildOverviewCardWithPlus(
                    'Income',
                    '₹${income.toStringAsFixed(2)}',
                    Colors.green.withOpacity(0.2),
                    Colors.green,
                    Icons.add,
                  ),
                ],
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Container(
                padding: const EdgeInsets.all(10.0),
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      'Balance: ₹${(income - _calculateCurrentMonthExpenses()).toStringAsFixed(2)}',
                      style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
                    ),
                    const Icon(Icons.account_balance_wallet),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 20),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text(
                    'Recent Transactions',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 10),
            transactions.isEmpty
                ? const Center(
              child: Padding(
                padding: EdgeInsets.symmetric(vertical: 20.0),
                child: Text(
                  'No transactions added yet!',
                  style: TextStyle(fontSize: 16, color: Colors.grey),
                ),
              ),
            )
                : _buildGroupedTransactionList(),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _navigateToAddTransactionForm(context);
        },
        child: const Icon(Icons.add),
        backgroundColor: Colors.teal,
      ),
    );
  }

  Widget _buildOverviewCardWithPlus(String title, String value, Color bgColor, Color iconColor, IconData icon) {
    return GestureDetector(
      onTap: () {
        if (title == 'Income') {
          _showAddIncomeForm(context);
        }
      },
      child: Container(
        width: 150,
        padding: const EdgeInsets.all(16.0),
        decoration: BoxDecoration(
          color: bgColor,
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          children: [
            Row(
              children: [
                Icon(icon, color: iconColor),
                const Spacer(),
                Text(
                  title,
                  style: TextStyle(fontSize: 14, color: Colors.black54),
                ),
              ],
            ),
            const SizedBox(height: 10),
            Text(
              value,
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: iconColor,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOverviewCard(String title, String value, Color bgColor, Color iconColor, IconData icon) {
    return Container(
      width: 150,
      padding: const EdgeInsets.all(16.0),
      decoration: BoxDecoration(
        color: bgColor,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        children: [
          Row(
            children: [
              Icon(icon, color: iconColor),
              const Spacer(),
              Text(
                title,
                style: TextStyle(fontSize: 14, color: Colors.black54),
              ),
            ],
          ),
          const SizedBox(height: 10),
          Text(
            value,
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: iconColor,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGroupedTransactionList() {
    Map<String, List<Map<String, dynamic>>> groupedTransactions = {};
    for (var transaction in transactions) {
      final date = transaction['date'];
      if (!groupedTransactions.containsKey(date)) {
        groupedTransactions[date] = [];
      }
      groupedTransactions[date]!.add(transaction);
    }

    List<String> sortedDates = groupedTransactions.keys.toList();
    sortedDates.sort((a, b) => DateFormat('dd MMM yy').parse(b).compareTo(DateFormat('dd MMM yy').parse(a)));

    return Column(
      children: sortedDates.map((date) {
        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
              child: Text(
                date,
                style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.grey),
              ),
            ),
            ...groupedTransactions[date]!.map((transaction) => Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 4.0),
              child: _buildTransactionCard(transaction),
            )),
          ],
        );
      }).toList(),
    );
  }

  Widget _buildTransactionCard(Map<String, dynamic> transaction) {
    return Container(
      padding: const EdgeInsets.all(12.0),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          CircleAvatar(
            backgroundColor: Colors.grey[200],
            child: Icon(transaction['icon'], color: Colors.teal),
          ),
          const SizedBox(width: 10),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '₹${transaction['amount']}',
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  transaction['category'],
                  style: const TextStyle(color: Colors.black54, fontSize: 14),
                ),
              ],
            ),
          ),
          Text(
            transaction['date'],
            style: const TextStyle(color: Colors.black45, fontSize: 12),
          ),
        ],
      ),
    );
  }

  double _calculateCurrentMonthExpenses() {
    final now = DateTime.now();
    return transactions
        .where((transaction) {
      final transactionDate = DateFormat('dd MMM yy').parse(transaction['date']);
      return transactionDate.month == now.month && transactionDate.year == now.year;
    })
        .map((transaction) => double.parse(transaction['amount']))
        .fold(0.0, (sum, amount) => sum + amount);
  }

  void _navigateToAddTransactionForm(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => AddTransactionForm(
          onAddTransaction: (transaction) {
            setState(() {
              transactions.add(transaction);
            });
          },
        ),
      ),
    );
  }

  void _showAddIncomeForm(BuildContext context) {
    final _formKey = GlobalKey<FormState>();
    String newIncome = '';

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        return Padding(
          padding: EdgeInsets.only(
            left: 16,
            right: 16,
            bottom: MediaQuery.of(context).viewInsets.bottom,
          ),
          child: Form(
            key: _formKey,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                const SizedBox(height: 16),
                TextFormField(
                  decoration: const InputDecoration(labelText: 'Enter Income'),
                  keyboardType: TextInputType.number,
                  onChanged: (value) {
                    if (double.tryParse(value) != null && double.parse(value) > 0) {
                      newIncome = value;
                    } else {
                      newIncome = '';
                    }
                  },
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Income is mandatory';
                    }
                    if (double.tryParse(value) == null || double.parse(value) <= 0) {
                      return 'Please enter a valid positive number';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),
                ElevatedButton(
                  onPressed: () {
                    if (_formKey.currentState!.validate()) {
                      setState(() {
                        income += double.parse(newIncome);
                      });
                      Navigator.of(context).pop();
                    }
                  },
                  child: const Text('Add Income'),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}
